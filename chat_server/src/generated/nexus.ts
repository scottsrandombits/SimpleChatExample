/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Comment: { // root type
    comment?: string | null; // String
    id?: number | null; // Int
    roomId?: number | null; // Int
    userId?: number | null; // Int
  }
  Member: { // root type
    id?: number | null; // Int
    roomId?: number | null; // Int
    userId?: number | null; // Int
  }
  Mutation: {};
  Query: {};
  Room: { // root type
    id?: number | null; // Int
    name?: string | null; // String
  }
  Subscription: {};
  User: { // root type
    id?: number | null; // Int
    token?: string | null; // String
    username?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Comment: { // field return type
    author: NexusGenRootTypes['User'] | null; // User
    comment: string | null; // String
    id: number | null; // Int
    roomId: number | null; // Int
    userId: number | null; // Int
  }
  Member: { // field return type
    id: number | null; // Int
    roomId: number | null; // Int
    user: NexusGenRootTypes['User'] | null; // User
    userId: number | null; // Int
  }
  Mutation: { // field return type
    addMember: NexusGenRootTypes['Room'] | null; // Room
    createComment: NexusGenRootTypes['Comment'] | null; // Comment
    createRoom: NexusGenRootTypes['Room'] | null; // Room
    createUser: NexusGenRootTypes['User'] | null; // User
    removeMember: NexusGenRootTypes['Room'] | null; // Room
  }
  Query: { // field return type
    allComments: Array<NexusGenRootTypes['Comment'] | null> | null; // [Comment]
    currentUser: NexusGenRootTypes['User'] | null; // User
    fetchRoom: NexusGenRootTypes['Room'] | null; // Room
    fetchRooms: Array<NexusGenRootTypes['Room'] | null> | null; // [Room]
  }
  Room: { // field return type
    comments: Array<NexusGenRootTypes['Comment'] | null> | null; // [Comment]
    id: number | null; // Int
    members: Array<NexusGenRootTypes['Member'] | null> | null; // [Member]
    name: string | null; // String
  }
  Subscription: { // field return type
    addComment: NexusGenRootTypes['Comment'] | null; // Comment
    addMember: NexusGenRootTypes['Room'] | null; // Room
    removeMember: NexusGenRootTypes['Room'] | null; // Room
  }
  User: { // field return type
    id: number | null; // Int
    token: string | null; // String
    username: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Comment: { // field return type name
    author: 'User'
    comment: 'String'
    id: 'Int'
    roomId: 'Int'
    userId: 'Int'
  }
  Member: { // field return type name
    id: 'Int'
    roomId: 'Int'
    user: 'User'
    userId: 'Int'
  }
  Mutation: { // field return type name
    addMember: 'Room'
    createComment: 'Comment'
    createRoom: 'Room'
    createUser: 'User'
    removeMember: 'Room'
  }
  Query: { // field return type name
    allComments: 'Comment'
    currentUser: 'User'
    fetchRoom: 'Room'
    fetchRooms: 'Room'
  }
  Room: { // field return type name
    comments: 'Comment'
    id: 'Int'
    members: 'Member'
    name: 'String'
  }
  Subscription: { // field return type name
    addComment: 'Comment'
    addMember: 'Room'
    removeMember: 'Room'
  }
  User: { // field return type name
    id: 'Int'
    token: 'String'
    username: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addMember: { // args
      slug?: string | null; // String
      username?: string | null; // String
    }
    createComment: { // args
      comment?: string | null; // String
      roomId?: string | null; // String
      username?: string | null; // String
    }
    createRoom: { // args
      name?: string | null; // String
    }
    createUser: { // args
      username?: string | null; // String
    }
    removeMember: { // args
      slug?: string | null; // String
      username?: string | null; // String
    }
  }
  Query: {
    currentUser: { // args
      token?: string | null; // String
    }
    fetchRoom: { // args
      slug?: string | null; // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}